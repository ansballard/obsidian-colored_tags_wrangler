/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/plugin/ColoredTagWranglerPlugin.ts
var ColoredTagWranglerPlugin_exports = {};
__export(ColoredTagWranglerPlugin_exports, {
  default: () => ColoredTagWranglerPlugin
});
module.exports = __toCommonJS(ColoredTagWranglerPlugin_exports);
var import_obsidian13 = require("obsidian");

// src/plugin/ui/setting_tab/SettingTab.ts
var import_obsidian12 = require("obsidian");

// src/plugin/ui/setting_tab/components/tag_table/SettingTagTable.ts
var import_obsidian10 = require("obsidian");

// src/plugin/ui/setting_tab/components/tag_table/SettingTagRecordTextAreaComponent.ts
var import_obsidian8 = require("obsidian");

// src/plugin/services/settings/SettingsService.ts
var import_obsidian2 = require("obsidian");

// node_modules/uuid/dist/esm-browser/rng.js
var getRandomValues;
var rnds8 = new Uint8Array(16);
function rng() {
  if (!getRandomValues) {
    getRandomValues = typeof crypto !== "undefined" && crypto.getRandomValues && crypto.getRandomValues.bind(crypto);
    if (!getRandomValues) {
      throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");
    }
  }
  return getRandomValues(rnds8);
}

// node_modules/uuid/dist/esm-browser/stringify.js
var byteToHex = [];
for (let i = 0; i < 256; ++i) {
  byteToHex.push((i + 256).toString(16).slice(1));
}
function unsafeStringify(arr, offset = 0) {
  return byteToHex[arr[offset + 0]] + byteToHex[arr[offset + 1]] + byteToHex[arr[offset + 2]] + byteToHex[arr[offset + 3]] + "-" + byteToHex[arr[offset + 4]] + byteToHex[arr[offset + 5]] + "-" + byteToHex[arr[offset + 6]] + byteToHex[arr[offset + 7]] + "-" + byteToHex[arr[offset + 8]] + byteToHex[arr[offset + 9]] + "-" + byteToHex[arr[offset + 10]] + byteToHex[arr[offset + 11]] + byteToHex[arr[offset + 12]] + byteToHex[arr[offset + 13]] + byteToHex[arr[offset + 14]] + byteToHex[arr[offset + 15]];
}

// node_modules/uuid/dist/esm-browser/native.js
var randomUUID = typeof crypto !== "undefined" && crypto.randomUUID && crypto.randomUUID.bind(crypto);
var native_default = {
  randomUUID
};

// node_modules/uuid/dist/esm-browser/v4.js
function v4(options, buf, offset) {
  if (native_default.randomUUID && !buf && !options) {
    return native_default.randomUUID();
  }
  options = options || {};
  const rnds = options.random || (options.rng || rng)();
  rnds[6] = rnds[6] & 15 | 64;
  rnds[8] = rnds[8] & 63 | 128;
  if (buf) {
    offset = offset || 0;
    for (let i = 0; i < 16; ++i) {
      buf[offset + i] = rnds[i];
    }
    return buf;
  }
  return unsafeStringify(rnds);
}
var v4_default = v4;

// src/plugin/services/migrator/migrations/migrate_00_to_01.ts
async function migrate_00_to_01(loaded_data) {
  let original_colored_tags = loaded_data.TagColors.ColorPicker;
  let transformedColoredTags = {};
  for (const key of Object.keys(original_colored_tags)) {
    const originalData = original_colored_tags[key];
    transformedColoredTags[v4_default()] = {
      tag_name: key,
      // You can set the 'tag_name' as the key
      color: originalData
    };
  }
  let transformed_data = loaded_data;
  transformed_data.TagColors.ColorPicker = transformedColoredTags;
  transformed_data.Info.SettingsVersion = 1;
  return transformed_data;
}

// src/plugin/services/migrator/migrations/migrate_01_to_02.ts
async function migrate_01_to_02(loaded_data) {
  let original_semantic_tags = loaded_data.TagColors.SemanticObsidianColors;
  let transformed_semantic_tags = {};
  for (const key of Object.keys(original_semantic_tags)) {
    const originalData = original_semantic_tags[key];
    transformed_semantic_tags[v4_default()] = {
      tag_name: key,
      // You can set the 'tag_name' as the key
      obsidian_css_var: originalData
    };
  }
  let original_css_var_tags = loaded_data.TagColors.CssVars;
  let transformed_css_var_tags = {};
  for (const key of Object.keys(original_css_var_tags)) {
    const originalData = original_css_var_tags[key];
    transformed_css_var_tags[v4_default()] = {
      tag_name: key,
      // You can set the 'tag_name' as the key
      color: originalData.color,
      background: originalData.background
    };
  }
  let transformed_data = loaded_data;
  transformed_data.TagColors.SemanticObsidianColors = transformed_semantic_tags;
  transformed_data.TagColors.CssVars = transformed_css_var_tags;
  transformed_data.Info.SettingsVersion = 2;
  return transformed_data;
}

// src/plugin/services/migrator/migrations/migrate_02_to_03.ts
async function migrate_02_to_03(loaded_data) {
  let transformed_data = loaded_data;
  transformed_data.Info.SettingsVersion = 3;
  return transformed_data;
}

// src/plugin/services/migrator/migrations/migrate_03_to_04.ts
async function migrate_03_to_04(loaded_data) {
  let transformed_data = loaded_data;
  transformed_data.TagColors = {
    ColorPicker: loaded_data.TagColors.ColorPicker,
    EnableMultipleTags: loaded_data.TagColors.EnableMultipleTags,
    Values: loaded_data.TagColors.Values
  };
  transformed_data.FolderNote.Values = {
    ForceImportant: true,
    BorderRadius: "12px",
    Padding: "5px"
  };
  transformed_data.Info.SettingsVersion = 4;
  return transformed_data;
}

// src/plugin/services/migrator/migrations/migrate_04_to_05.ts
async function migrate_04_to_05(loaded_data) {
  let transformed_data = loaded_data;
  for (const tagUUID of Object.keys(loaded_data.TagColors.ColorPicker)) {
    transformed_data.TagColors.ColorPicker[tagUUID] = {
      tag_name: loaded_data.TagColors.ColorPicker[tagUUID].tag_name,
      color: loaded_data.TagColors.ColorPicker[tagUUID].color,
      background_color: loaded_data.TagColors.ColorPicker[tagUUID].color,
      background_opacity: 0.2
    };
  }
  transformed_data.Info.SettingsVersion = 5;
  return transformed_data;
}

// src/plugin/services/migrator/migrations/migrate_05_to_06.ts
async function migrate_05_to_06(loaded_data) {
  let transformed_data = loaded_data;
  transformed_data.Kanban.HideHashtags = loaded_data.Kanban.Enable;
  transformed_data.Info.SettingsVersion = 6;
  return transformed_data;
}

// .old/api/ColorConverters.ts
function rgbToHsl(rgb) {
  const r = rgb.r / 255;
  const g = rgb.g / 255;
  const b = rgb.b / 255;
  const max = Math.max(r, g, b);
  const min = Math.min(r, g, b);
  const l = (max + min) / 2;
  let h = 0;
  let s = 0;
  if (max !== min) {
    s = l > 0.5 ? (max - min) / (2 - max - min) : (max - min) / (max + min);
    if (max === r) {
      h = (60 * ((g - b) / (max - min)) + 360) % 360;
    } else if (max === g) {
      h = 60 * ((b - r) / (max - min)) + 120;
    } else {
      h = 60 * ((r - g) / (max - min)) + 240;
    }
  }
  return { h, s, l };
}
function hslToRgb(hsl) {
  const { h, s, l } = hsl;
  const normalizedHue = (h % 360 + 360) % 360;
  const normalizedSaturation = Math.max(0, Math.min(1, s));
  const normalizedLightness = Math.max(0, Math.min(1, l));
  const chroma = (1 - Math.abs(2 * normalizedLightness - 1)) * normalizedSaturation;
  const x = chroma * (1 - Math.abs(normalizedHue / 60 % 2 - 1));
  const m = normalizedLightness - chroma / 2;
  let r = 0, g = 0, b = 0;
  if (normalizedHue >= 0 && normalizedHue < 60) {
    r = chroma;
    g = x;
  } else if (normalizedHue >= 60 && normalizedHue < 120) {
    r = x;
    g = chroma;
  } else if (normalizedHue >= 120 && normalizedHue < 180) {
    g = chroma;
    b = x;
  } else if (normalizedHue >= 180 && normalizedHue < 240) {
    g = x;
    b = chroma;
  } else if (normalizedHue >= 240 && normalizedHue < 300) {
    r = x;
    b = chroma;
  } else {
    r = chroma;
    b = x;
  }
  r = Math.round((r + m) * 255);
  g = Math.round((g + m) * 255);
  b = Math.round((b + m) * 255);
  return { r, g, b };
}

// src/plugin/services/migrator/migrations/migrate_06_to_07.ts
async function migrate_06_to_07(loaded_data) {
  let transformed_data = loaded_data;
  transformed_data.TagColors.Values.LuminanceOffset = 0.15;
  transformed_data.TagColors.EnableSeparateLuminanceOffset = false;
  transformed_data.TagColors.EnableDarkLightDifference = true;
  transformed_data.TagColors.EnableBackgroundOpacity = false;
  transformed_data.TagColors.Values.BackgroundOpacity = 0.2;
  for (const tagUUID of Object.keys(loaded_data.TagColors.ColorPicker)) {
    let old_record = loaded_data.TagColors.ColorPicker[tagUUID];
    transformed_data.TagColors.ColorPicker[tagUUID] = {
      tag_name: old_record.tag_name,
      color: old_record.color,
      background_color: checkColor(old_record.background_color, old_record.color) ? callback_fix_background(old_record.background_color, transformed_data.TagColors.Values.LuminanceOffset) : old_record.background_color,
      luminance_offset: transformed_data.TagColors.Values.LuminanceOffset
    };
  }
  transformed_data.Info.SettingsVersion = 7;
  return transformed_data;
}
function checkColor(color, background) {
  return color.r === background.r && color.g === background.g && color.b === background.b;
}
function callback_fix_background(background, luminance_offset) {
  let background_hsl = rgbToHsl(background);
  background_hsl.l -= luminance_offset;
  return hslToRgb(background_hsl);
}

// src/plugin/services/migrator/migrations/migrate_07_to_08.ts
async function migrate_07_to_08(loaded_data) {
  let transformed_data = loaded_data;
  transformed_data.FolderNote.EnableAutoDetect = true;
  transformed_data.Info.SettingsVersion = 8;
  return transformed_data;
}

// src/plugin/services/migrator/migrations/migrate_08_to_09.ts
async function migrate_08_to_09(loaded_data) {
  let transformed_data = loaded_data;
  transformed_data.CSS = {
    Enable: false,
    TagsNoWrap: false,
    TagsNoWrapText: "pre"
  };
  transformed_data.Info.SettingsVersion = 9;
  return transformed_data;
}

// src/plugin/services/migrator/migrations/migrate_09_to_10.ts
async function migrate_09_to_10(loaded_data) {
  const temp_data = loaded_data;
  delete temp_data.CSS.Enable;
  let transformed_data = temp_data;
  transformed_data.CSS.NoteTags = true;
  transformed_data.CSS.NoteBackgrounds = false;
  transformed_data.CSS.NoteProperties = true;
  transformed_data.Info.SettingsVersion = 10;
  return transformed_data;
}

// src/plugin/services/migrator/migrations/migrate_10_to_11.ts
async function migrate_10_to_11(loaded_data) {
  let transformed_data = loaded_data;
  transformed_data.TagColors.ColorPicker = Object.values(loaded_data.TagColors.ColorPicker);
  transformed_data.Debug.EnableExperimentalCommands = false;
  transformed_data.Info.SettingsVersion = 11;
  return transformed_data;
}

// src/plugin/services/migrator/migrations/migrate_11_to_12.ts
async function migrate_11_to_12(loaded_data) {
  let transformed_data = loaded_data;
  transformed_data.FolderNote.FolderTagLinks = Object.values(loaded_data.FolderNote.FolderTagLinks);
  transformed_data.Info.SettingsVersion = 12;
  return transformed_data;
}

// src/plugin/services/migrator/migrations/migrate_12_to_13.ts
async function migrate_12_to_13(loaded_data) {
  let transformed_data = loaded_data;
  transformed_data.FolderNote.EnableBackgroundOpacity = loaded_data.TagColors.EnableBackgroundOpacity;
  transformed_data.FolderNote.Values.BackgroundOpacity = loaded_data.TagColors.Values.BackgroundOpacity;
  transformed_data.Kanban.EnableBackgroundOpacity = loaded_data.TagColors.EnableBackgroundOpacity;
  transformed_data.Kanban.Values.BackgroundOpacity = loaded_data.TagColors.Values.BackgroundOpacity;
  transformed_data.Canvas.EnableBackgroundOpacity = loaded_data.TagColors.EnableBackgroundOpacity;
  transformed_data.Canvas.Values.BackgroundOpacity = loaded_data.TagColors.Values.BackgroundOpacity;
  transformed_data.Info.SettingsVersion = 13;
  return transformed_data;
}

// src/plugin/services/migrator/migrations/migrate_13_to_14.ts
async function migrate_13_to_14(loaded_data) {
  let transformed_data = loaded_data;
  transformed_data.Info.SettingsVersion = 14;
  return transformed_data;
}

// src/plugin/services/migrator/migrations/migrate_14_to_15.ts
async function migrate_14_to_15(loaded_data) {
  let new_data = Object.assign({}, defaultSettings);
  new_data.TagColors = loaded_data.TagColors.ColorPicker.map(
    (old_tag) => {
      const newTagColor = ServiceProvider.tagRecords.getDefaultRecord();
      newTagColor.core_tagText = old_tag.tag_name;
      newTagColor.core_color_foreground = { ...old_tag.color };
      newTagColor.core_color_background = { ...old_tag.background_color };
      if (loaded_data.TagColors.EnableBackgroundOpacity) {
        newTagColor.css_styling_opacity = loaded_data.TagColors.Values.BackgroundOpacity;
      }
      if (loaded_data.Canvas.Enable) {
        newTagColor.canvas_card_enable_background = true;
        newTagColor.canvas_card_enable_border = true;
        newTagColor.canvas_card_background_opacity = loaded_data.Canvas.Values.BackgroundOpacity;
      }
      return newTagColor;
    }
  );
  new_data.Info.SettingsVersion = 15;
  return new_data;
}

// src/plugin/services/migrator/MigratorService.ts
var import_obsidian = require("obsidian");
var _MigratorService = class {
  // -----------------------------------------------------------------------------------------------------------------
  // Constructors
  // -----------------------------------------------------------------------------------------------------------------
  constructor(plugin) {
    this.plugin = plugin;
  }
  // -----------------------------------------------------------------------------------------------------------------
  // Methods
  // -----------------------------------------------------------------------------------------------------------------
  async migrateData(data) {
    var _a, _b;
    if (data === null) {
      return null;
    }
    let version = (_b = (_a = data == null ? void 0 : data.Info) == null ? void 0 : _a.SettingsVersion) != null ? _b : -1;
    if (version === -1 || version <= 14) {
      await this.plugin.app.vault.adapter.copy(
        `${this.plugin.manifest.dir}/data.json`,
        `${this.plugin.manifest.dir}/data_backup-${Date.now().toString()}.json`
      );
    }
    if (version === -1) {
      console.warn("Version could not be established, assigning as is. Created a data_backup.json file.");
      new import_obsidian.Notice("ColoredTagsWrangler : <br>Version could not be read from data.json. Backup created as data_backup.json file.");
      return data;
    }
    if (version <= 14) {
      new import_obsidian.Notice("ColoredTagsWrangler : <br>data.json was made for a lower version, upgrading it to the newest version. Backup created as data_backup.json file.");
    }
    let migratedData = data;
    for (version; version < _MigratorService.MIGRATION_STEPS.length; version++) {
      migratedData = await _MigratorService.MIGRATION_STEPS[version](migratedData);
      console.log(`Migrated data.json from ColoredTagsWrangler to version ${migratedData.Info.SettingsVersion}`);
    }
    return migratedData;
  }
};
var MigratorService = _MigratorService;
MigratorService.MIGRATION_STEPS = [
  // Using any's isn't perfect but will do for now
  // Add more lambdas in order.
  //      Btw this only works because I am dumb enough to start from 0,
  //      that way I don't need to do any other steps in the for loop
  async (data) => await migrate_00_to_01(data),
  // 0
  async (data) => await migrate_01_to_02(data),
  // 1
  async (data) => await migrate_02_to_03(data),
  // 2
  async (data) => await migrate_03_to_04(data),
  // 3
  async (data) => await migrate_04_to_05(data),
  // 4
  async (data) => await migrate_05_to_06(data),
  // 5
  async (data) => await migrate_06_to_07(data),
  // 6
  async (data) => await migrate_07_to_08(data),
  // 7
  async (data) => await migrate_08_to_09(data),
  // 8
  async (data) => await migrate_09_to_10(data),
  // 9
  async (data) => await migrate_10_to_11(data),
  // 10
  async (data) => await migrate_11_to_12(data),
  // 11
  async (data) => await migrate_12_to_13(data),
  // 12
  async (data) => await migrate_13_to_14(data),
  // 13
  async (data) => await migrate_14_to_15(data)
  // 14
];
// I have become too lazy to keep track of which version we are on.
MigratorService.CURRENT_VERSION = _MigratorService.MIGRATION_STEPS.length + 1;

// src/plugin/services/settings/DefaultSettings.ts
var defaultSettingsInfo = {
  SettingsVersion: MigratorService.CURRENT_VERSION
  // just add a migration and we are up to a new version number.
};
var defaultSettings = {
  TagColors: [],
  EnabledExtensions: ["core"],
  Info: defaultSettingsInfo
};

// src/plugin/services/settings/SettingsService.ts
var SettingsService = class {
  // -----------------------------------------------------------------------------------------------------------------
  // Constructors
  // -----------------------------------------------------------------------------------------------------------------
  constructor(plugin, migrator) {
    this._plugin = plugin;
    this._migrator = migrator;
    this.debounceSaveToFile = (0, import_obsidian2.debounce)(this.saveToFile, 100);
  }
  // -----------------------------------------------------------------------------------------------------------------
  // Methods
  // -----------------------------------------------------------------------------------------------------------------
  async loadFromFile() {
    const tempData = await this._plugin.loadData();
    this.data = Object.assign(
      {},
      defaultSettings,
      await this._migrator.migrateData(tempData)
    );
    this.debounceSaveToFile();
  }
  async saveToFile() {
    await this._plugin.saveData(this.data);
  }
};

// src/lib/RegexUtils.ts
var reSLASH = /\//g;
var reSplit = /[\n;]/;

// src/plugin/services/tag_records/TagRecordsService.ts
var TagRecordsService = class {
  // -----------------------------------------------------------------------------------------------------------------
  // Constructors
  // -----------------------------------------------------------------------------------------------------------------
  constructor(settings, extensions) {
    this._flatCache = null;
    this._settings = settings;
    this._extensions = extensions;
  }
  get _tagRecords() {
    return this._settings.data.TagColors;
  }
  // -----------------------------------------------------------------------------------------------------------------
  // Methods
  // -----------------------------------------------------------------------------------------------------------------
  getTagsFlat(remove_slash = true) {
    var _a;
    return (_a = this._flatCache) != null ? _a : this._flatCache = this._tagRecords.flatMap((record) => {
      return record.core_tagText.split(reSplit).map((tag) => tag.trim().toLowerCase()).filter(Boolean).map((tag) => remove_slash ? tag.replace(reSLASH, "") : tag).map((tag) => ({ ...record, core_tagText: tag }));
    });
  }
  getTags() {
    return this._tagRecords;
  }
  getTagCount() {
    return this._tagRecords.length;
  }
  async addOrUpdateTag(record) {
    const index = this.getTagIndex(record);
    if (index !== -1) {
      this._tagRecords[index] = record;
    } else {
      this._tagRecords.push(record);
    }
    await this._settings.debounceSaveToFile.run();
    this._flatCache = null;
    ServiceProvider.cssStyler.processExtensions();
  }
  async removeTag(record) {
    this._tagRecords.remove(record);
    await this._settings.debounceSaveToFile.run();
    this._flatCache = null;
  }
  getTagIndex(record) {
    return this._tagRecords.findIndex((r) => r.core_id === record.core_id);
  }
  getFirstTag(record) {
    var _a;
    return (_a = record.core_tagText.split(reSplit).first()) != null ? _a : "UNDEFINED";
  }
  getTagPreviewIds(record) {
    return {
      begin: `tag-preview-being-${record.core_id}`,
      end: `tag-preview-end-${record.core_id}`
    };
  }
  getDefaultRecord() {
    return this._extensions.FullList.reduce(
      (acc, cur) => ({ ...acc, ...cur.getDefaultRecord() }),
      {}
    );
  }
  async createNewDefaultTag() {
    const newRecord = this.getDefaultRecord();
    if (this._flatCache === null) {
      this.getTagsFlat();
    }
    const defaultPresent = this._flatCache.filter((record) => record.core_tagText.startsWith(newRecord.core_tagText)).length;
    newRecord.core_tagText += `-${defaultPresent}`;
    await this.addOrUpdateTag(newRecord);
  }
};

// src/plugin/ui/setting_tab/components/tag_table/SettingTagRecordColorComponent.ts
var import_obsidian3 = require("obsidian");

// src/lib/ColorConverters.ts
function hexToRGBA(hex, alpha) {
  hex = hex.replace(/^#/, "");
  if (alpha < 0)
    alpha = 0;
  if (alpha > 1)
    alpha = 1;
  const r = parseInt(hex.substring(0, 2), 16);
  const g = parseInt(hex.substring(2, 4), 16);
  const b = parseInt(hex.substring(4, 6), 16);
  return { r, g, b, a: alpha };
}
function rgbToString(color) {
  return `rgb(${color.r}, ${color.g}, ${color.b})`;
}
function rgbopacityToString(color, opacity) {
  return `rgba(${color.r}, ${color.g}, ${color.b}, ${opacity})`;
}
function rgbaToHex(color) {
  const { r, g, b } = color;
  return "#" + [r, g, b].map((x) => {
    const hex = x.toString(16);
    return hex.length === 1 ? "0" + hex : hex;
  }).join("");
}

// src/plugin/ui/setting_tab/components/tag_table/SettingTagRecordColorComponent.ts
var SettingTagRecordColorComponent = class extends import_obsidian3.ColorComponent {
  constructor(rowData, property_name) {
    super(rowData.parentEl);
    let value = rowData.record[property_name];
    this.setValue(rgbaToHex(value));
    this.onChange(async (newValue) => {
      rowData.record[property_name] = hexToRGBA(newValue, 1);
      await ServiceProvider.tagRecords.addOrUpdateTag(rowData.record);
      await rowData.rowUpdateCallback();
    });
  }
};

// src/plugin/ui/setting_tab/components/tag_table/SettingTagRecordToggleComponent.ts
var import_obsidian4 = require("obsidian");
var SettingTagRecordToggleComponent = class extends import_obsidian4.ToggleComponent {
  constructor(rowData, property_name) {
    super(rowData.parentEl);
    this.setValue(rowData.record[property_name]);
    this.onChange(async (newValue) => {
      rowData.record[property_name] = newValue;
      await ServiceProvider.tagRecords.addOrUpdateTag(rowData.record);
    });
  }
};

// src/plugin/services/css_styler/CssStylerService.ts
var themeSelectorLight = "body.theme-light";
var themeSelectorDark = "body.theme-dark";
var CssStylerService = class {
  // -----------------------------------------------------------------------------------------------------------------
  // Constructors
  // -----------------------------------------------------------------------------------------------------------------
  constructor(extensions) {
    this.extensions = extensions;
    this.styleElement = document.createElement("style");
    this.styleElement.id = "colored-tags-wrangler";
  }
  processExtensions() {
    this.styleElement.innerHTML = "";
    this.styleElement.innerHTML = this.createCSS();
    document.head.appendChild(this.styleElement);
  }
  cleanup() {
    document.head.removeChild(this.styleElement);
  }
  createCSS() {
    let dict = {};
    this.extensions.EnabledList.forEach((e) => {
      const rules = e.cssWrangler.getRules();
      Object.keys(rules).forEach((key) => {
        dict[key] = Object.assign(dict[key] || {}, rules[key]);
      });
    });
    return Object.keys(dict).map(
      (selector) => `${selector} { ${Object.keys(dict[selector]).map((property) => `${property}: ${dict[selector][property]};`).join("")} }`
    ).join("\n");
  }
};

// src/plugin/extensions/core/CoreCssWrangler.ts
var CoreCssWrangler = class {
  // -----------------------------------------------------------------------------------------------------------------
  // Helper Methods
  // -----------------------------------------------------------------------------------------------------------------
  _properties(record) {
    return {
      "color": `${rgbToString(record.core_color_foreground)} !important`,
      "background": `${rgbToString(record.core_color_background)} !important`
    };
  }
  _selectors(theme, record) {
    return [
      `${theme} .tag[href="#${record.core_tagText}" i]`,
      `${theme} .cm-tag-${record.core_tagText}`
    ];
  }
  // -----------------------------------------------------------------------------------------------------------------
  // Methods
  // -----------------------------------------------------------------------------------------------------------------
  getRules() {
    const dict = {};
    ServiceProvider.tagRecords.getTagsFlat(false).filter((record) => record.core_enabled).forEach(
      (record) => {
        this._selectors(themeSelectorLight, record).forEach((rule) => {
          dict[rule] = this._properties(record);
        });
        this._selectors(themeSelectorDark, record).forEach((rule) => {
          dict[rule] = this._properties(record);
        });
      }
    );
    return dict;
  }
};

// src/plugin/extensions/AbstractExtension.ts
var AbstractExtension = class {
  constructor() {
    this.extensionRequirements = [];
  }
  get isEnabled() {
    return ServiceProvider.extensions.EnabledList.contains(this);
  }
  set isEnabled(value) {
    ServiceProvider.extensions.setExtension(this, value);
  }
};

// src/plugin/extensions/core/CoreExtension.ts
var CoreExtension = class extends AbstractExtension {
  constructor() {
    super(...arguments);
    this.cssWrangler = new CoreCssWrangler();
    this.extensionName = "core";
    this.description = "Core functionality of the plugin";
    this.TableContentPopulators = [
      {
        title: "Enable Colors",
        callback: (rowData) => {
          return new SettingTagRecordToggleComponent(
            rowData,
            "core_enabled"
          );
        },
        classes: ["header-wrap-every-word", "border-right-dotted"]
      },
      {
        title: "Text",
        callback: (rowData) => {
          return new SettingTagRecordColorComponent(
            rowData,
            "core_color_foreground"
          );
        },
        classes: []
      },
      {
        title: "Fill",
        callback: (rowData) => {
          return new SettingTagRecordColorComponent(
            rowData,
            "core_color_background"
          );
        },
        classes: []
      }
    ];
  }
  // -----------------------------------------------------------------------------------------------------------------
  // Methods
  // -----------------------------------------------------------------------------------------------------------------
  getDefaultRecord() {
    return {
      core_enabled: true,
      core_id: v4_default(),
      core_tagText: "new-tag",
      core_color_foreground: { r: 255, g: 255, b: 255 },
      core_color_background: { r: 0, g: 0, b: 0 }
    };
  }
};

// src/plugin/extensions/styling/CssStylingCssWrangler.ts
var CssStylingCssWrangler = class {
  // -----------------------------------------------------------------------------------------------------------------
  // Helper Methods
  // -----------------------------------------------------------------------------------------------------------------
  _properties(record) {
    const dict = {};
    if (record.css_styling_bold_enabled) {
      dict["font-weight"] = "bold";
    }
    if (record.css_styling_italic_enabled) {
      dict["font-style"] = "italic";
    }
    if (record.css_styling_font_family !== void 0 && record.css_styling_font_family !== null && record.css_styling_font_family !== "") {
      dict["font-family"] = `${record.css_styling_font_family}`;
    }
    if (record.css_styling_font_size !== void 0 && record.css_styling_font_size !== null && record.css_styling_font_size !== 1) {
      dict["font-size"] = `${record.css_styling_font_size}em`;
    }
    if (record.css_styling_opacity !== void 0 && record.css_styling_opacity !== null && record.css_styling_opacity !== 1) {
      if (record.core_enabled) {
        dict["background-color"] = `${rgbopacityToString(record.core_color_background, record.css_styling_opacity)} !important`;
      } else {
        dict["background-color"] = `hsla(var(--accent-h), var(--accent-s), var(--accent-l), ${record.css_styling_opacity})`;
      }
    }
    return dict;
  }
  _selectors(theme, record) {
    return [
      `${theme} .tag[href="#${record.core_tagText}" i]`,
      `${theme} .cm-tag-${record.core_tagText}`
    ];
  }
  // -----------------------------------------------------------------------------------------------------------------
  // Methods
  // -----------------------------------------------------------------------------------------------------------------
  getRules() {
    const dict = {};
    const defaultRecord = ServiceProvider.extensions.CssStyling.getDefaultRecord();
    ServiceProvider.tagRecords.getTagsFlat(false).filter((record) => {
      return Object.keys(defaultRecord).first((key) => record[key] !== defaultRecord[key]);
    }).forEach(
      (record) => {
        this._selectors(themeSelectorLight, record).forEach((rule) => {
          dict[rule] = this._properties(record);
        });
        this._selectors(themeSelectorDark, record).forEach((rule) => {
          dict[rule] = this._properties(record);
        });
      }
    );
    return dict;
  }
};

// src/plugin/ui/setting_tab/components/tag_table/SettingTagRecordSliderComponent.ts
var import_obsidian5 = require("obsidian");
var SettingTagRecordSliderComponent = class extends import_obsidian5.BaseComponent {
  // -----------------------------------------------------------------------------------------------------------------
  // Constructors
  // -----------------------------------------------------------------------------------------------------------------
  constructor(rowData, property_name, min, max, step, enableReset = false, resetValue = null) {
    var _a;
    super();
    this.boxEl = rowData.parentEl.createDiv({ "cls": "slider-box" });
    if (enableReset) {
      this.buttonEl = new import_obsidian5.ExtraButtonComponent(this.boxEl).setIcon("reset").setTooltip("restore defaults").onClick(async () => {
        var _a2;
        rowData.record[property_name] = resetValue == null ? min : resetValue;
        this.sliderEl.setValue((_a2 = rowData.record[property_name]) != null ? _a2 : min);
        await ServiceProvider.tagRecords.addOrUpdateTag(rowData.record);
      });
    }
    this.sliderEl = new import_obsidian5.SliderComponent(this.boxEl).setLimits(min, max, step).setValue((_a = rowData.record[property_name]) != null ? _a : min).setDynamicTooltip().onChange(async (newValue) => {
      rowData.record[property_name] = newValue;
      await ServiceProvider.tagRecords.addOrUpdateTag(rowData.record);
    });
  }
  // -----------------------------------------------------------------------------------------------------------------
  // Methods
  // -----------------------------------------------------------------------------------------------------------------
  hide() {
    this.buttonEl.extraSettingsEl.hide();
    this.sliderEl.sliderEl.hide();
    this.boxEl.hide();
  }
};

// src/plugin/ui/setting_tab/components/tag_table/SettingTagRecordTextInputComponent.ts
var import_obsidian6 = require("obsidian");
var SettingTagRecordTextInputComponent = class extends import_obsidian6.TextComponent {
  constructor(rowData, property_name) {
    super(rowData.parentEl);
    this.setValue(rowData.record[property_name]);
    this.onChange(async (newValue) => {
      rowData.record[property_name] = newValue;
      await ServiceProvider.tagRecords.addOrUpdateTag(rowData.record);
    });
  }
};

// src/plugin/extensions/styling/CssStylingExtension.ts
var CssStylingExtension = class extends AbstractExtension {
  constructor() {
    super(...arguments);
    this.cssWrangler = new CssStylingCssWrangler();
    this.extensionName = "Styling";
    this.description = "Style your tags even more!";
    this.TableContentPopulators = [
      // {
      // 	title: "Custom CSS styling",
      // 	callback: (rowData) => new SettingTagRecordToggleComponent(rowData, "css_styling_enabled"),
      // 	classes: ["header-wrap-every-word", "border-right-dotted"]
      // },
      {
        title: "Background Opacity",
        callback: (rowData) => new SettingTagRecordSliderComponent(
          rowData,
          "css_styling_opacity",
          0,
          1,
          0.01,
          true,
          1
        ),
        classes: ["header-wrap-every-word"]
      },
      {
        title: "Boldify",
        callback: (rowData) => new SettingTagRecordToggleComponent(rowData, "css_styling_bold_enabled"),
        classes: []
      },
      {
        title: "Italicize",
        callback: (rowData) => new SettingTagRecordToggleComponent(rowData, "css_styling_italic_enabled"),
        classes: []
      },
      {
        title: "Font Family",
        callback: (rowData) => new SettingTagRecordTextInputComponent(rowData, "css_styling_font_family"),
        classes: []
      },
      {
        title: "Font Size",
        callback: (rowData) => new SettingTagRecordSliderComponent(
          rowData,
          "css_styling_font_size",
          0.5,
          2,
          0.05,
          true,
          1
        ),
        classes: []
      }
    ];
  }
  getDefaultRecord() {
    return {
      css_styling_bold_enabled: false,
      css_styling_font_family: "",
      css_styling_font_size: 1,
      css_styling_italic_enabled: false,
      css_styling_opacity: 1
    };
  }
};

// src/plugin/extensions/canvas_card/CanvasCardCssWrangler.ts
var CanvasCardCssWrangler = class {
  // -----------------------------------------------------------------------------------------------------------------
  // Helper Methods
  // -----------------------------------------------------------------------------------------------------------------
  _properties(record) {
    const dict = {};
    if (record.canvas_card_enable_border) {
      dict["border-color"] = `${rgbToString(record.core_color_foreground)} !important`;
    }
    if (record.canvas_card_enable_background) {
      dict["background-color"] = `${rgbopacityToString(record.core_color_background, record.canvas_card_background_opacity)} !important`;
    }
    return dict;
  }
  _selectors(theme, record) {
    return [
      `${theme} div.canvas-node > div.canvas-node-container:has(a.tag)[href="#${record.core_tagText}" i]`,
      `${theme} div.canvas-node:has(div.canvas-node-container:has(a.tag)[href="#${record.core_tagText}" i])`,
      `${theme} div.canvas-node-container:has(div.markdown-embed-content a[href="#${record.core_tagText}" i])`
    ];
  }
  // -----------------------------------------------------------------------------------------------------------------
  // Methods
  // -----------------------------------------------------------------------------------------------------------------
  getRules() {
    const dict = {};
    ServiceProvider.tagRecords.getTagsFlat(false).filter((record) => {
      return record.canvas_card_enable_border || record.canvas_card_enable_background || record.canvas_card_background_opacity !== ServiceProvider.extensions.CanvasCards.getDefaultRecord().canvas_card_background_opacity;
    }).sort((a, b) => {
      if (a.canvas_card_priority === void 0 || b.canvas_card_priority === void 0)
        return 1;
      return a.canvas_card_priority >= b.canvas_card_priority ? 1 : -1;
    }).forEach(
      (record) => {
        this._selectors(themeSelectorLight, record).forEach((rule) => {
          dict[rule] = this._properties(record);
        });
        this._selectors(themeSelectorDark, record).forEach((rule) => {
          dict[rule] = this._properties(record);
        });
      }
    );
    return dict;
  }
};

// src/plugin/ui/setting_tab/components/tag_table/SettingTagRecordNumberInputComponent.ts
var import_obsidian7 = require("obsidian");
var SettingTagRecordNumberInputComponent = class extends import_obsidian7.TextComponent {
  constructor(rowData, property_name, placeholder = 0) {
    var _a, _b;
    super(rowData.parentEl);
    this.inputEl.classList.add("settingTagRecordNumberInputComponent");
    this.setPlaceholder(placeholder.toString());
    this.setValue((_b = (_a = rowData.record[property_name]) == null ? void 0 : _a.toString()) != null ? _b : "");
    this.onChange(async (newValue) => {
      rowData.record[property_name] = Number.parseInt(newValue);
      await ServiceProvider.tagRecords.addOrUpdateTag(rowData.record);
    });
  }
};

// src/plugin/extensions/canvas_card/CanvasCardExtension.ts
var CanvasCardExtension = class extends AbstractExtension {
  constructor() {
    super(...arguments);
    this.cssWrangler = new CanvasCardCssWrangler();
    this.extensionName = "canvas cards";
    this.description = "Apply Tag formatting to Canvas Cards";
    this.extensionRequirements = ["core"];
    this.TableContentPopulators = [
      {
        title: "Enable Border",
        callback: (rowData) => {
          return new SettingTagRecordToggleComponent(
            rowData,
            "canvas_card_enable_border"
          );
        },
        classes: ["header-wrap-every-word"]
      },
      {
        title: "Enable Background",
        callback: (rowData) => {
          return new SettingTagRecordToggleComponent(
            rowData,
            "canvas_card_enable_background"
          );
        },
        classes: ["header-wrap-every-word"]
      },
      {
        title: "Background Opacity",
        callback: (rowData) => {
          return new SettingTagRecordSliderComponent(
            rowData,
            "canvas_card_background_opacity",
            0,
            1,
            0.01,
            true,
            this.getDefaultRecord().canvas_card_background_opacity
          );
        },
        classes: ["header-wrap-every-word"]
      },
      {
        title: "Priority",
        callback: (rowData) => {
          return new SettingTagRecordNumberInputComponent(
            rowData,
            "canvas_card_priority"
          );
        },
        classes: ["header-wrap-every-word"]
      }
    ];
  }
  // -----------------------------------------------------------------------------------------------------------------
  // Methods
  // -----------------------------------------------------------------------------------------------------------------
  getDefaultRecord() {
    return {
      canvas_card_enable_border: true,
      canvas_card_enable_background: true,
      canvas_card_background_opacity: 0.45,
      canvas_card_priority: void 0
    };
  }
};

// src/plugin/services/extensions/ExtensionsService.ts
var ExtensionsService = class {
  get FullList() {
    var _a;
    return (_a = this._List) != null ? _a : this._List = this.AsList();
  }
  get EnabledList() {
    var _a;
    return (_a = this._EnabledList) != null ? _a : this.FullList.filter((e) => this._settings.data.EnabledExtensions.contains(e.extensionName));
  }
  get Dictionary() {
    var _a;
    return (_a = this._Dictionary) != null ? _a : this._Dictionary = this.AsDictionary();
  }
  get EnabledListAsStrings() {
    return this.EnabledList.map((e) => e.extensionName);
  }
  // -----------------------------------------------------------------------------------------------------------------
  // Constructors
  // -----------------------------------------------------------------------------------------------------------------
  constructor(settings) {
    this._settings = settings;
    this.Core = new CoreExtension();
    this.CssStyling = new CssStylingExtension();
    this.CanvasCards = new CanvasCardExtension();
  }
  // -----------------------------------------------------------------------------------------------------------------
  // Methods
  // -----------------------------------------------------------------------------------------------------------------
  setExtension(extension, value) {
    if (value) {
      this._settings.data.EnabledExtensions.push(extension.extensionName);
    } else {
      if (this._settings.data.EnabledExtensions.contains(extension.extensionName)) {
        this._settings.data.EnabledExtensions.remove(extension.extensionName);
      }
    }
    this._EnabledList = void 0;
  }
  AsList() {
    return [
      this.Core,
      this.CssStyling,
      this.CanvasCards
    ];
  }
  AsDictionary() {
    return this.AsList().reduce(
      (acc, e) => {
        acc[e.extensionName] = e;
        return acc;
      },
      {}
    );
  }
};

// src/plugin/services/ServiceProvider.ts
var _ServiceProvider = class {
  // -----------------------------------------------------------------------------------------------------------------
  // Methods
  // -----------------------------------------------------------------------------------------------------------------
  static PopulateInstances(plugin) {
    if (_ServiceProvider.Instantiated)
      return;
    _ServiceProvider.plugin = plugin;
    _ServiceProvider.migrator = new MigratorService(plugin);
    _ServiceProvider.settings = new SettingsService(plugin, _ServiceProvider.migrator);
    _ServiceProvider.extensions = new ExtensionsService(_ServiceProvider.settings);
    _ServiceProvider.tagRecords = new TagRecordsService(_ServiceProvider.settings, _ServiceProvider.extensions);
    _ServiceProvider.cssStyler = new CssStylerService(_ServiceProvider.extensions);
    _ServiceProvider.Instantiated = true;
  }
};
var ServiceProvider = _ServiceProvider;
ServiceProvider.Instantiated = false;

// src/plugin/ui/setting_tab/components/tag_table/SettingTagRecordTextAreaComponent.ts
var SettingTagRecordTextAreaComponent = class extends import_obsidian8.TextAreaComponent {
  constructor(rowData, property_name) {
    super(rowData.parentEl);
    this.setValue(rowData.record[property_name]);
    this.onChange(async (newValue) => {
      this.inputEl.style.height = "auto";
      this.inputEl.style.height = this.calcHeight();
      rowData.record[property_name] = newValue;
      await ServiceProvider.tagRecords.addOrUpdateTag(rowData.record);
      await rowData.rowUpdateCallback();
    });
    this.inputEl.style.height = this.calcHeight();
  }
  calcHeight() {
    return `${this.inputEl.scrollHeight + 5}px`;
  }
};

// src/plugin/ui/setting_tab/components/tag_table/SettingTagRecordPreview.ts
var SettingTagRecordPreview = class {
  // This is just a recreation of the obsidian tag spans
  //		Although I should be able to create some sort of system to update them easily?
  //		Currently, this is done by giving them specific Ids tied to the uuid of the records.
  constructor(rowData) {
    this.El = rowData.parentEl.createDiv();
    this.El.addClass("tag-preview-div");
    let el2 = this.El.createDiv();
    const previewIds = ServiceProvider.tagRecords.getTagPreviewIds(rowData.record);
    const firstTag = ServiceProvider.tagRecords.getFirstTag(rowData.record);
    const elBegin = el2.createEl("span");
    elBegin.addClasses(["cm-hashtag", "cm-hashtag-begin", "cm-meta", `cm-tag-${firstTag}`]);
    elBegin.id = previewIds.begin;
    const elEnd = el2.createEl("span");
    elEnd.addClasses(["cm-hashtag", "cm-hashtag-end", "cm-meta", `cm-tag-${firstTag}`]);
    elEnd.id = previewIds.end;
  }
  setDisabled(disabled) {
    this.disabled = disabled;
    this.El.hidden = disabled;
    return this;
  }
  then(cb) {
    return this;
  }
};

// src/plugin/ui/setting_tab/components/tag_table/SettingTagRecordNavigators.ts
var import_obsidian9 = require("obsidian");

// src/lib/ArrayUtils.ts
function arrayMove(arr, fromIndex, toIndex) {
  if (toIndex < 0 || toIndex === arr.length) {
    return;
  }
  const element = arr[fromIndex];
  arr[fromIndex] = arr[toIndex];
  arr[toIndex] = element;
}

// src/plugin/ui/setting_tab/components/tag_table/SettingTagRecordNavigators.ts
var SettingTagRecordNavigators = class {
  // This is just a recreation of the obsidian tag spans
  //		Although I should be able to create some sort of system to update them easily?
  //		Currently, this is done by giving them specific Ids tied to the uuid of the records.
  constructor(rowData, enableRemove = true, redrawCallback) {
    this.El = rowData.parentEl.createDiv();
    this.El.addClass("navigator-parent");
    const recordIndex = ServiceProvider.tagRecords.getTagIndex(rowData.record);
    if (enableRemove) {
      new import_obsidian9.ExtraButtonComponent(this.El).setIcon("trash").setTooltip("Delete record").onClick(async () => {
        await ServiceProvider.tagRecords.removeTag(rowData.record);
        await redrawCallback();
      }).extraSettingsEl.classList.add("navigator-trash");
    }
    if (recordIndex !== 0) {
      new import_obsidian9.ExtraButtonComponent(this.El).setIcon("up-chevron-glyph").setTooltip("Move up").onClick(async () => {
        arrayMove(ServiceProvider.tagRecords.getTags(), recordIndex, recordIndex - 1);
        ServiceProvider.settings.debounceSaveToFile();
        await redrawCallback();
      }).extraSettingsEl.classList.add("navigator-chevron-up");
    }
    if (recordIndex !== ServiceProvider.tagRecords.getTagCount() - 1) {
      new import_obsidian9.ExtraButtonComponent(this.El).setIcon("down-chevron-glyph").setTooltip("Move down").onClick(async () => {
        arrayMove(ServiceProvider.tagRecords.getTags(), recordIndex, recordIndex + 1);
        ServiceProvider.settings.debounceSaveToFile();
        await redrawCallback();
      }).extraSettingsEl.classList.add("navigator-chevron-down");
    }
  }
  setDisabled(disabled) {
    this.disabled = disabled;
    this.El.hidden = disabled;
    return this;
  }
  then(cb) {
    return this;
  }
};

// src/lib/StringUtils.ts
function capitalizeFirstLetter(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
}

// src/plugin/ui/setting_tab/components/tag_table/SettingTagTable.ts
var SettingTagTable = class {
  // -----------------------------------------------------------------------------------------------------------------
  // Constructor
  // -----------------------------------------------------------------------------------------------------------------
  constructor(parent) {
    this.parent = parent;
    this._AssignEls();
  }
  // -----------------------------------------------------------------------------------------------------------------
  // Methods
  // -----------------------------------------------------------------------------------------------------------------
  async display() {
    if (this.settingEl == void 0 && this.tableEl !== void 0) {
      this._AssignEls();
    }
    await this._DisplayExtensionSelector();
    await this._DisplayTable();
    await this.addNewButton(this.settingElBottom);
  }
  async redrawTable() {
    this.tableEl.empty();
    await this._DisplayTable();
  }
  async UpdateRow(record, _) {
    const tag = ServiceProvider.tagRecords.getFirstTag(record);
    const originalLength = tag.length;
    let { begin, end } = this.getTagPreviewEls(record);
    if (!begin || !end) {
      console.warn(`The tag "${record}" BEGIN or END is empty.`);
      return;
    }
    const displayTag = originalLength >= 9 ? `${tag.substring(0, 8)}...` : tag;
    if (begin.textContent !== "#")
      begin.textContent = "#";
    if (end.textContent !== displayTag)
      end.textContent = displayTag;
  }
  // -----------------------------------------------------------------------------------------------------------------
  // Helper Methods
  // -----------------------------------------------------------------------------------------------------------------
  _AssignEls() {
    this.settingEl = new import_obsidian10.Setting(this.parent.containerEl);
    this.tableEl = this.parent.containerEl.createDiv();
    this.settingElBottom = new import_obsidian10.Setting(this.parent.containerEl);
  }
  async _DisplayExtensionSelector() {
    const element = this.settingEl.setName("Custom color tags").setDesc(`Define custom colors for tags. Select which extension to edit, dependant on the `);
    if (ServiceProvider.extensions.EnabledList.length > 1) {
      element.addDropdown((component) => {
        component.addOptions(
          ServiceProvider.extensions.EnabledList.map((extension) => extension.extensionName).reduce(
            (acc, key) => ({ ...acc, [key]: capitalizeFirstLetter(key) }),
            {}
          )
        ).onChange(async (value) => {
          this.selectedExtension = value;
          await this.redrawTable();
        });
      });
    }
    await this.addNewButton(element);
  }
  async addNewButton(settingEl) {
    settingEl.addButton((component) => {
      component.setClass("mod-cta").setButtonText("New Tag").onClick(async () => {
        await ServiceProvider.tagRecords.createNewDefaultTag();
        await this.redrawTable();
      });
    });
  }
  async _DisplayTable() {
    let scrollAreaContainer = this.tableEl.createDiv();
    scrollAreaContainer.addClass("scroll-area-container");
    let tableContainer = scrollAreaContainer.createDiv();
    tableContainer.addClass("scroll-container");
    let overlayGradient = scrollAreaContainer.createDiv();
    overlayGradient.addClass("overlay-gradient");
    const content = [
      {
        title: "",
        callback: (rowData) => {
          return new SettingTagRecordNavigators(
            rowData,
            true,
            async () => await this.redrawTable()
          );
        },
        classes: []
      },
      {
        title: "Tag",
        callback: (rowData) => {
          return new SettingTagRecordTextAreaComponent(
            rowData,
            "core_tagText"
          );
        },
        classes: []
      },
      {
        title: "Preview",
        callback: (rowData) => {
          return new SettingTagRecordPreview(rowData);
        },
        classes: ["tag-preview", "sticky-column", "border-right"]
      }
    ];
    const selectedExt = this.selectedExtension != void 0 ? ServiceProvider.extensions.Dictionary[this.selectedExtension] : ServiceProvider.extensions.EnabledList.first();
    selectedExt == null ? void 0 : selectedExt.TableContentPopulators.forEach((callback) => content.push(callback));
    let table = tableContainer.createEl("table");
    let thead = table.createEl("thead");
    let headersRow = thead.createEl("tr");
    for (let { title, classes } of content) {
      headersRow.createEl("th", { text: title, cls: classes });
      headersRow.addClasses(classes);
    }
    let tbody = table.createEl("tbody");
    for (let record of ServiceProvider.tagRecords.getTags()) {
      const tr = tbody.createEl("tr");
      for (let { callback, classes } of content) {
        let td = tr.createEl("td");
        td.addClasses(classes);
        callback({
          record,
          rowUpdateCallback: async () => {
            await this.UpdateRow(record, tr);
            ServiceProvider.cssStyler.processExtensions();
          },
          parentEl: td
        });
      }
      await this.UpdateRow(record, tr);
    }
  }
  getTagPreviewEls(record) {
    const ids = ServiceProvider.tagRecords.getTagPreviewIds(record);
    return {
      begin: document.getElementById(ids.begin),
      end: document.getElementById(ids.end)
    };
  }
};

// src/plugin/ui/setting_tab/components/extension_selector/SettingExtensionSelector.ts
var import_obsidian11 = require("obsidian");
var SettingExtensionSelector = class {
  // -----------------------------------------------------------------------------------------------------------------
  // Constructor
  // -----------------------------------------------------------------------------------------------------------------
  constructor(parent) {
    this.parent = parent;
    this._AssignEls();
  }
  // -----------------------------------------------------------------------------------------------------------------
  // Helper Methods
  // -----------------------------------------------------------------------------------------------------------------
  _AssignEls() {
    this.masterEl = this.parent.containerEl.createDiv();
    this.masterEl.addClass("extension-selector");
    this.gridContainerEl = this.masterEl.createDiv();
    this.gridContainerEl.addClass("grid-container");
  }
  createExtensionGridItem(extension) {
    const gridItem = new import_obsidian11.Setting(document.createElement("div")).setClass("grid-item").setName(capitalizeFirstLetter(extension.extensionName)).setDesc(extension.description).addToggle((cb) => {
      cb.setValue(extension.isEnabled);
      cb.onChange((value) => {
        if (extension.extensionRequirements.length != 0 && value) {
          const notFoundRequirements = extension.extensionRequirements.filter((ext) => !ServiceProvider.extensions.EnabledListAsStrings.includes(ext));
          if (notFoundRequirements.length > 0) {
            const values = notFoundRequirements.map(capitalizeFirstLetter).join(", ");
            const doc = new DocumentFragment();
            doc.createSpan({}).innerText = extension.description;
            doc.createSpan({ "cls": "text-color-red" }).innerHTML = `<br>The following extension requirements were not set: <b>${values}</b>`;
            gridItem.setDesc(doc);
            return;
          }
        }
        gridItem.setDesc(extension.description);
        extension.isEnabled = value;
        ServiceProvider.cssStyler.processExtensions();
        this.parent.display();
      });
    });
    return gridItem.settingEl;
  }
  // -----------------------------------------------------------------------------------------------------------------
  // Methods
  // -----------------------------------------------------------------------------------------------------------------
  async display() {
    for (const iExtension of ServiceProvider.extensions.FullList) {
      const el = this.createExtensionGridItem(iExtension);
      this.gridContainerEl.appendChild(el);
    }
  }
};

// src/plugin/ui/setting_tab/SettingTab.ts
var SettingTab3 = class extends import_obsidian12.PluginSettingTab {
  // -----------------------------------------------------------------------------------------------------------------
  // Methods
  // -----------------------------------------------------------------------------------------------------------------
  async display() {
    const { containerEl } = this;
    containerEl.empty();
    new import_obsidian12.Setting(containerEl).setName("Tag table").setHeading();
    await new SettingTagTable(this).display();
    new import_obsidian12.Setting(containerEl).setName("Extension selector").setHeading();
    await new SettingExtensionSelector(this).display();
  }
};

// src/plugin/ColoredTagWranglerPlugin.ts
var ColoredTagWranglerPlugin = class extends import_obsidian13.Plugin {
  constructor(app, manifest) {
    super(app, manifest);
    ServiceProvider.PopulateInstances(this);
  }
  // -----------------------------------------------------------------------------------------------------------------
  // Methods
  // -----------------------------------------------------------------------------------------------------------------
  async onload() {
    await ServiceProvider.settings.loadFromFile();
    ServiceProvider.cssStyler.processExtensions();
    this.addSettingTab(new SettingTab3(this.app, this));
  }
  async onunload() {
    await ServiceProvider.settings.saveToFile();
    ServiceProvider.cssStyler.cleanup();
  }
};
//# sourceMappingURL=data:application/json;base64,
