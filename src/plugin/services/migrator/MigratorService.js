var _a;
import { __awaiter } from "tslib";
// ---------------------------------------------------------------------------------------------------------------------
// Imports
// ---------------------------------------------------------------------------------------------------------------------
import * as migrations from "./migrations";
import { Notice } from "obsidian";
// ---------------------------------------------------------------------------------------------------------------------
// Support Code
// ---------------------------------------------------------------------------------------------------------------------
export class MigratorService {
    // -----------------------------------------------------------------------------------------------------------------
    // Constructors
    // -----------------------------------------------------------------------------------------------------------------
    constructor(plugin) {
        this.plugin = plugin;
    }
    // -----------------------------------------------------------------------------------------------------------------
    // Methods
    // -----------------------------------------------------------------------------------------------------------------
    migrateData(data) {
        var _b, _c;
        return __awaiter(this, void 0, void 0, function* () {
            // If the plugin hasn't been used before, no data will be present aka no migrations needed
            if (data === null) {
                return null;
            }
            // Set a default version, else the migrations won't work.
            let version = (_c = (_b = data === null || data === void 0 ? void 0 : data.Info) === null || _b === void 0 ? void 0 : _b.SettingsVersion) !== null && _c !== void 0 ? _c : -1;
            if (version === -1 || version <= 14) {
                // copy the data file to the backup location
                yield this.plugin.app.vault.adapter.copy(`${this.plugin.manifest.dir}/data.json`, `${this.plugin.manifest.dir}/data_backup.json`);
            }
            if (version === -1) {
                // Exit clause
                console.warn("Version could not be established, assigning as is. Created a data_backup.json file.");
                new Notice("ColoredTagsWrangler : <br>Version could not be read from data.json. Backup created as data_backup.json file.");
                return data;
            }
            if (version <= 14) {
                new Notice("ColoredTagsWrangler : <br>data.json was made for a lower version, upgrading it to the newest version. Backup created as data_backup.json file.");
            }
            // Actual migrations
            let migratedData = data;
            for (version; version < MigratorService.MIGRATION_STEPS.length; version++) {
                migratedData = yield MigratorService.MIGRATION_STEPS[version](migratedData);
                console.log(`Migrated data.json from ColoredTagsWrangler to version ${migratedData.Info.SettingsVersion}`);
            }
            return migratedData;
        });
    }
}
_a = MigratorService;
MigratorService.MIGRATION_STEPS = [
    // Add more lambdas in order.
    //      Btw this only works because I am dumb enough to start from 0,
    //      that way I don't need to do any other steps in the for loop
    (data) => __awaiter(void 0, void 0, void 0, function* () { return yield migrations.migrate_00_to_01(data); }),
    (data) => __awaiter(void 0, void 0, void 0, function* () { return yield migrations.migrate_01_to_02(data); }),
    (data) => __awaiter(void 0, void 0, void 0, function* () { return yield migrations.migrate_02_to_03(data); }),
    (data) => __awaiter(void 0, void 0, void 0, function* () { return yield migrations.migrate_03_to_04(data); }),
    (data) => __awaiter(void 0, void 0, void 0, function* () { return yield migrations.migrate_04_to_05(data); }),
    (data) => __awaiter(void 0, void 0, void 0, function* () { return yield migrations.migrate_05_to_06(data); }),
    (data) => __awaiter(void 0, void 0, void 0, function* () { return yield migrations.migrate_06_to_07(data); }),
    (data) => __awaiter(void 0, void 0, void 0, function* () { return yield migrations.migrate_07_to_08(data); }),
    (data) => __awaiter(void 0, void 0, void 0, function* () { return yield migrations.migrate_08_to_09(data); }),
    (data) => __awaiter(void 0, void 0, void 0, function* () { return yield migrations.migrate_09_to_10(data); }),
    (data) => __awaiter(void 0, void 0, void 0, function* () { return yield migrations.migrate_10_to_11(data); }),
    (data) => __awaiter(void 0, void 0, void 0, function* () { return yield migrations.migrate_11_to_12(data); }),
    (data) => __awaiter(void 0, void 0, void 0, function* () { return yield migrations.migrate_12_to_13(data); }),
    (data) => __awaiter(void 0, void 0, void 0, function* () { return yield migrations.migrate_13_to_14(data); }),
    (data) => __awaiter(void 0, void 0, void 0, function* () { return yield migrations.migrate_14_to_15(data); }), // 14
];
// I have become too lazy to keep track of which version we are on.
MigratorService.CURRENT_VERSION = MigratorService.MIGRATION_STEPS.length + 1;
//# sourceMappingURL=data:application/json;base64,