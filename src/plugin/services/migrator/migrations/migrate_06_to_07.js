import { __awaiter } from "tslib";
import { hslToRgb, rgbToHsl } from ".old/api/ColorConverters";
// ---------------------------------------------------------------------------------------------------------------------
// Code
// ---------------------------------------------------------------------------------------------------------------------
export function migrate_06_to_07(loaded_data) {
    return __awaiter(this, void 0, void 0, function* () {
        let transformed_data = loaded_data;
        transformed_data.TagColors.Values.LuminanceOffset = 0.15;
        transformed_data.TagColors.EnableSeparateLuminanceOffset = false;
        transformed_data.TagColors.EnableDarkLightDifference = true;
        transformed_data.TagColors.EnableBackgroundOpacity = false;
        transformed_data.TagColors.Values.BackgroundOpacity = 0.2;
        // Fixes mistake
        for (const tagUUID of Object.keys(loaded_data.TagColors.ColorPicker)) {
            let old_record = loaded_data.TagColors.ColorPicker[tagUUID];
            transformed_data.TagColors.ColorPicker[tagUUID] = {
                tag_name: old_record.tag_name,
                color: old_record.color,
                background_color: checkColor(old_record.background_color, old_record.color)
                    ? callback_fix_background(old_record.background_color, transformed_data.TagColors.Values.LuminanceOffset)
                    : old_record.background_color,
                luminance_offset: transformed_data.TagColors.Values.LuminanceOffset,
            };
        }
        transformed_data.Info.SettingsVersion = 7;
        return transformed_data;
    });
}
function checkColor(color, background) {
    return (color.r === background.r
        && color.g === background.g
        && color.b === background.b);
}
function callback_fix_background(background, luminance_offset) {
    let background_hsl = rgbToHsl(background);
    background_hsl.l -= luminance_offset;
    return hslToRgb(background_hsl);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWlncmF0ZV8wNl90b18wNy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIm1pZ3JhdGVfMDZfdG9fMDcudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUtBLE9BQU8sRUFBQyxRQUFRLEVBQUUsUUFBUSxFQUFDLE1BQU0sMEJBQTBCLENBQUM7QUFDNUQsd0hBQXdIO0FBQ3hILE9BQU87QUFDUCx3SEFBd0g7QUFDeEgsTUFBTSxVQUFnQixnQkFBZ0IsQ0FBQyxXQUEwQjs7UUFDN0QsSUFBSSxnQkFBZ0IsR0FBRyxXQUF3QyxDQUFDO1FBQ2hFLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsZUFBZSxHQUFHLElBQUksQ0FBQztRQUN6RCxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsNkJBQTZCLEdBQUcsS0FBSyxDQUFDO1FBQ2pFLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyx5QkFBeUIsR0FBRyxJQUFJLENBQUM7UUFDNUQsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLHVCQUF1QixHQUFHLEtBQUssQ0FBQztRQUMzRCxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLGlCQUFpQixHQUFHLEdBQUcsQ0FBQztRQUUxRCxnQkFBZ0I7UUFDaEIsS0FBSyxNQUFNLE9BQU8sSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxTQUFTLENBQUMsV0FBVyxDQUFDLEVBQUM7WUFDakUsSUFBSSxVQUFVLEdBQUcsV0FBVyxDQUFDLFNBQVMsQ0FBQyxXQUFXLENBQUMsT0FBTyxDQUFDLENBQUM7WUFDNUQsZ0JBQWdCLENBQUMsU0FBUyxDQUFDLFdBQVcsQ0FBQyxPQUFPLENBQUMsR0FBRztnQkFDOUMsUUFBUSxFQUFDLFVBQVUsQ0FBQyxRQUFRO2dCQUM1QixLQUFLLEVBQUMsVUFBVSxDQUFDLEtBQUs7Z0JBQ3RCLGdCQUFnQixFQUFDLFVBQVUsQ0FBQyxVQUFVLENBQUMsZ0JBQWdCLEVBQUUsVUFBVSxDQUFDLEtBQUssQ0FBQztvQkFDdEUsQ0FBQyxDQUFDLHVCQUF1QixDQUFDLFVBQVUsQ0FBQyxnQkFBZ0IsRUFBRSxnQkFBZ0IsQ0FBQyxTQUFTLENBQUMsTUFBTSxDQUFDLGVBQWUsQ0FBQztvQkFDekcsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxnQkFBZ0I7Z0JBQ2pDLGdCQUFnQixFQUFDLGdCQUFnQixDQUFDLFNBQVMsQ0FBQyxNQUFNLENBQUMsZUFBZTthQUNyRSxDQUFBO1NBQ0o7UUFFRCxnQkFBZ0IsQ0FBQyxJQUFJLENBQUMsZUFBZSxHQUFHLENBQUMsQ0FBQztRQUMxQyxPQUFPLGdCQUE2QyxDQUFDO0lBQ3pELENBQUM7Q0FBQTtBQUVELFNBQVMsVUFBVSxDQUFDLEtBQVMsRUFBRSxVQUFjO0lBQ3pDLE9BQU8sQ0FDSCxLQUFLLENBQUMsQ0FBQyxLQUFLLFVBQVUsQ0FBQyxDQUFDO1dBQ3JCLEtBQUssQ0FBQyxDQUFDLEtBQUssVUFBVSxDQUFDLENBQUM7V0FDeEIsS0FBSyxDQUFDLENBQUMsS0FBSyxVQUFVLENBQUMsQ0FBQyxDQUM5QixDQUFBO0FBQ0wsQ0FBQztBQUVELFNBQVMsdUJBQXVCLENBQUMsVUFBYyxFQUFFLGdCQUF1QjtJQUNwRSxJQUFJLGNBQWMsR0FBRyxRQUFRLENBQUMsVUFBVSxDQUFDLENBQUE7SUFDekMsY0FBYyxDQUFDLENBQUMsSUFBSSxnQkFBZ0IsQ0FBQTtJQUNwQyxPQUFPLFFBQVEsQ0FBQyxjQUFjLENBQUMsQ0FBQTtBQUNuQyxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8vIEltcG9ydHNcclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbmltcG9ydCB7SVNldHRpbmdzX3YwMDYsIElTZXR0aW5nc192MDA3fSBmcm9tIFwiLi4vc2V0dGluZ192ZXJzaW9uc1wiO1xyXG5pbXBvcnQge1JHQn0gZnJvbSBcIm9ic2lkaWFuXCI7XHJcbmltcG9ydCB7aHNsVG9SZ2IsIHJnYlRvSHNsfSBmcm9tIFwiLm9sZC9hcGkvQ29sb3JDb252ZXJ0ZXJzXCI7XHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyBDb2RlXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5leHBvcnQgYXN5bmMgZnVuY3Rpb24gbWlncmF0ZV8wNl90b18wNyhsb2FkZWRfZGF0YTpJU2V0dGluZ3NfdjAwNik6UHJvbWlzZTxJU2V0dGluZ3NfdjAwNz4ge1xyXG4gICAgbGV0IHRyYW5zZm9ybWVkX2RhdGEgPSBsb2FkZWRfZGF0YSBhcyB1bmtub3duIGFzIElTZXR0aW5nc192MDA3O1xyXG4gICAgdHJhbnNmb3JtZWRfZGF0YS5UYWdDb2xvcnMuVmFsdWVzLkx1bWluYW5jZU9mZnNldCA9IDAuMTU7XHJcbiAgICB0cmFuc2Zvcm1lZF9kYXRhLlRhZ0NvbG9ycy5FbmFibGVTZXBhcmF0ZUx1bWluYW5jZU9mZnNldCA9IGZhbHNlO1xyXG4gICAgdHJhbnNmb3JtZWRfZGF0YS5UYWdDb2xvcnMuRW5hYmxlRGFya0xpZ2h0RGlmZmVyZW5jZSA9IHRydWU7XHJcbiAgICB0cmFuc2Zvcm1lZF9kYXRhLlRhZ0NvbG9ycy5FbmFibGVCYWNrZ3JvdW5kT3BhY2l0eSA9IGZhbHNlO1xyXG4gICAgdHJhbnNmb3JtZWRfZGF0YS5UYWdDb2xvcnMuVmFsdWVzLkJhY2tncm91bmRPcGFjaXR5ID0gMC4yO1xyXG5cclxuICAgIC8vIEZpeGVzIG1pc3Rha2VcclxuICAgIGZvciAoY29uc3QgdGFnVVVJRCBvZiBPYmplY3Qua2V5cyhsb2FkZWRfZGF0YS5UYWdDb2xvcnMuQ29sb3JQaWNrZXIpKXtcclxuICAgICAgICBsZXQgb2xkX3JlY29yZCA9IGxvYWRlZF9kYXRhLlRhZ0NvbG9ycy5Db2xvclBpY2tlclt0YWdVVUlEXTtcclxuICAgICAgICB0cmFuc2Zvcm1lZF9kYXRhLlRhZ0NvbG9ycy5Db2xvclBpY2tlclt0YWdVVUlEXSA9IHtcclxuICAgICAgICAgICAgdGFnX25hbWU6b2xkX3JlY29yZC50YWdfbmFtZSxcclxuICAgICAgICAgICAgY29sb3I6b2xkX3JlY29yZC5jb2xvcixcclxuICAgICAgICAgICAgYmFja2dyb3VuZF9jb2xvcjpjaGVja0NvbG9yKG9sZF9yZWNvcmQuYmFja2dyb3VuZF9jb2xvciwgb2xkX3JlY29yZC5jb2xvcilcclxuICAgICAgICAgICAgICAgID8gY2FsbGJhY2tfZml4X2JhY2tncm91bmQob2xkX3JlY29yZC5iYWNrZ3JvdW5kX2NvbG9yLCB0cmFuc2Zvcm1lZF9kYXRhLlRhZ0NvbG9ycy5WYWx1ZXMuTHVtaW5hbmNlT2Zmc2V0KVxyXG4gICAgICAgICAgICAgICAgOiBvbGRfcmVjb3JkLmJhY2tncm91bmRfY29sb3IsXHJcbiAgICAgICAgICAgIGx1bWluYW5jZV9vZmZzZXQ6dHJhbnNmb3JtZWRfZGF0YS5UYWdDb2xvcnMuVmFsdWVzLkx1bWluYW5jZU9mZnNldCxcclxuICAgICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgdHJhbnNmb3JtZWRfZGF0YS5JbmZvLlNldHRpbmdzVmVyc2lvbiA9IDc7XHJcbiAgICByZXR1cm4gdHJhbnNmb3JtZWRfZGF0YSBhcyB1bmtub3duIGFzIElTZXR0aW5nc192MDA3O1xyXG59XHJcblxyXG5mdW5jdGlvbiBjaGVja0NvbG9yKGNvbG9yOlJHQiwgYmFja2dyb3VuZDpSR0IpOmJvb2xlYW57XHJcbiAgICByZXR1cm4gKFxyXG4gICAgICAgIGNvbG9yLnIgPT09IGJhY2tncm91bmQuclxyXG4gICAgICAgICYmIGNvbG9yLmcgPT09IGJhY2tncm91bmQuZ1xyXG4gICAgICAgICYmIGNvbG9yLmIgPT09IGJhY2tncm91bmQuYlxyXG4gICAgKVxyXG59XHJcblxyXG5mdW5jdGlvbiBjYWxsYmFja19maXhfYmFja2dyb3VuZChiYWNrZ3JvdW5kOlJHQiwgbHVtaW5hbmNlX29mZnNldDpudW1iZXIpOlJHQntcclxuICAgIGxldCBiYWNrZ3JvdW5kX2hzbCA9IHJnYlRvSHNsKGJhY2tncm91bmQpXHJcbiAgICBiYWNrZ3JvdW5kX2hzbC5sIC09IGx1bWluYW5jZV9vZmZzZXRcclxuICAgIHJldHVybiBoc2xUb1JnYihiYWNrZ3JvdW5kX2hzbClcclxufVxyXG4iXX0=