// ---------------------------------------------------------------------------------------------------------------------
// Code
// ---------------------------------------------------------------------------------------------------------------------
const rxCssComment = /\/\*[^*]*\*+([^/*][^*]*\*+)*\//g;
const lineCleanup = (line) => line.split("\n")
    .map(l => l.replace(rxCssComment, '').trim()) // Remove CSS comments
    .join(" ");
export const themeSelectorLight = "body.theme-light";
export const themeSelectorDark = "body.theme-dark";
// ---------------------------------------------------------------------------------------------------------------------
// Code
// ---------------------------------------------------------------------------------------------------------------------
export class CssStylerService {
    // -----------------------------------------------------------------------------------------------------------------
    // Constructors
    // -----------------------------------------------------------------------------------------------------------------
    constructor(extensions, tagRecords) {
        this.extensions = extensions;
        this.tagRecords = tagRecords;
        this.styleElement = document.createElement("style");
        this.styleElement.id = "colored-tags-wrangler";
    }
    processExtensions() {
        this.styleElement.innerHTML = "";
        this.styleElement.innerHTML = this.extensions.EnabledList
            // Each extension should handle their own rules for filtering which records are applied to or not
            .flatMap(e => e.cssWrangler.getRules())
            .map(lineCleanup)
            .join(" ");
        document.head.appendChild(this.styleElement);
    }
    cleanup() {
        document.head.removeChild(this.styleElement);
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiQ3NzU3R5bGVyU2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIkNzc1N0eWxlclNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBUUEsd0hBQXdIO0FBQ3hILE9BQU87QUFDUCx3SEFBd0g7QUFDeEgsTUFBTSxZQUFZLEdBQUcsaUNBQWlDLENBQUM7QUFDdkQsTUFBTSxXQUFXLEdBQUcsQ0FBQyxJQUFZLEVBQUUsRUFBRSxDQUNwQyxJQUFJLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQztLQUNkLEdBQUcsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsWUFBWSxFQUFFLEVBQUUsQ0FBQyxDQUFDLElBQUksRUFBRSxDQUFDLENBQUUsc0JBQXNCO0tBQ3BFLElBQUksQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUViLE1BQU0sQ0FBQyxNQUFNLGtCQUFrQixHQUFHLGtCQUFrQixDQUFDO0FBQ3JELE1BQU0sQ0FBQyxNQUFNLGlCQUFpQixHQUFHLGlCQUFpQixDQUFDO0FBRW5ELHdIQUF3SDtBQUN4SCxPQUFPO0FBQ1Asd0hBQXdIO0FBQ3hILE1BQU0sT0FBTyxnQkFBZ0I7SUFNNUIsb0hBQW9IO0lBQ3BILGVBQWU7SUFDZixvSEFBb0g7SUFDcEgsWUFBWSxVQUErQixFQUFFLFVBQTZCO1FBQ3pFLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO1FBQzdCLElBQUksQ0FBQyxVQUFVLEdBQUcsVUFBVSxDQUFDO1FBRTdCLElBQUksQ0FBQyxZQUFZLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUNwRCxJQUFJLENBQUMsWUFBWSxDQUFDLEVBQUUsR0FBRyx1QkFBdUIsQ0FBQTtJQUMvQyxDQUFDO0lBRU0saUJBQWlCO1FBQ3ZCLElBQUksQ0FBQyxZQUFZLENBQUMsU0FBUyxHQUFHLEVBQUUsQ0FBQztRQUNqQyxJQUFJLENBQUMsWUFBWSxDQUFDLFNBQVMsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLFdBQVc7WUFDeEQsaUdBQWlHO2FBQ2hHLE9BQU8sQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFBLENBQUMsQ0FBQyxXQUFXLENBQUMsUUFBUSxFQUFFLENBQUM7YUFDckMsR0FBRyxDQUFDLFdBQVcsQ0FBQzthQUNoQixJQUFJLENBQUMsR0FBRyxDQUFDLENBQUE7UUFFWCxRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDOUMsQ0FBQztJQUVNLE9BQU87UUFDYixRQUFRLENBQUMsSUFBSSxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsWUFBWSxDQUFDLENBQUM7SUFDOUMsQ0FBQztDQUVEIiwic291cmNlc0NvbnRlbnQiOlsiLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8vIEltcG9ydHNcclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbmltcG9ydCB7SUNzc1N0eWxlclNlcnZpY2V9IGZyb20gXCIuLi8uLi8uLi9jb250cmFjdHMvcGx1Z2luL3NlcnZpY2VzL2Nzc19zdHlsZXIvSUNzc1N0eWxlclNlcnZpY2VcIjtcclxuaW1wb3J0IHtJRXh0ZW5zaW9uc1NlcnZpY2V9IGZyb20gXCIuLi8uLi8uLi9jb250cmFjdHMvcGx1Z2luL3NlcnZpY2VzL2V4dGVuc2lvbnMvSUV4dGVuc2lvbnNTZXJ2aWNlXCI7XHJcbmltcG9ydCB7SVRhZ1JlY29yZHNTZXJ2aWNlfSBmcm9tIFwiLi4vLi4vLi4vY29udHJhY3RzL3BsdWdpbi9zZXJ2aWNlcy90YWdfcmVjb3Jkcy9JVGFnUmVjb3Jkc1NlcnZpY2VcIjtcclxuaW1wb3J0IHtJQ29sb3JlZFRhZ1JlY29yZH0gZnJvbSBcIi4uLy4uLy4uL2NvbnRyYWN0cy9wbHVnaW4vc2V0dGluZ3MvSUNvbG9yZWRUYWdSZWNvcmRcIjtcclxuXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG4vLyBDb2RlXHJcbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5jb25zdCByeENzc0NvbW1lbnQgPSAvXFwvXFwqW14qXSpcXCorKFteLypdW14qXSpcXCorKSpcXC8vZztcclxuY29uc3QgbGluZUNsZWFudXAgPSAobGluZTogc3RyaW5nKSA9PlxyXG5cdGxpbmUuc3BsaXQoXCJcXG5cIilcclxuXHRcdC5tYXAobCA9PiBsLnJlcGxhY2UocnhDc3NDb21tZW50LCAnJykudHJpbSgpKSAgLy8gUmVtb3ZlIENTUyBjb21tZW50c1xyXG5cdFx0LmpvaW4oXCIgXCIpO1xyXG5cclxuZXhwb3J0IGNvbnN0IHRoZW1lU2VsZWN0b3JMaWdodCA9IFwiYm9keS50aGVtZS1saWdodFwiO1xyXG5leHBvcnQgY29uc3QgdGhlbWVTZWxlY3RvckRhcmsgPSBcImJvZHkudGhlbWUtZGFya1wiO1xyXG5cclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbi8vIENvZGVcclxuLy8gLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbmV4cG9ydCBjbGFzcyBDc3NTdHlsZXJTZXJ2aWNlIGltcGxlbWVudHMgSUNzc1N0eWxlclNlcnZpY2V7XHJcblx0cHJpdmF0ZSBzdHlsZUVsZW1lbnQ6IEhUTUxTdHlsZUVsZW1lbnQ7XHJcblxyXG5cdHByaXZhdGUgZXh0ZW5zaW9ucyA6IElFeHRlbnNpb25zU2VydmljZVxyXG5cdHByaXZhdGUgdGFnUmVjb3JkcyA6IElUYWdSZWNvcmRzU2VydmljZVxyXG5cclxuXHQvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cdC8vIENvbnN0cnVjdG9yc1xyXG5cdC8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcblx0Y29uc3RydWN0b3IoZXh0ZW5zaW9ucyA6IElFeHRlbnNpb25zU2VydmljZSwgdGFnUmVjb3JkczpJVGFnUmVjb3Jkc1NlcnZpY2UpIHtcclxuXHRcdHRoaXMuZXh0ZW5zaW9ucyA9IGV4dGVuc2lvbnM7XHJcblx0XHR0aGlzLnRhZ1JlY29yZHMgPSB0YWdSZWNvcmRzO1xyXG5cclxuXHRcdHRoaXMuc3R5bGVFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpO1xyXG5cdFx0dGhpcy5zdHlsZUVsZW1lbnQuaWQgPSBcImNvbG9yZWQtdGFncy13cmFuZ2xlclwiXHJcblx0fVxyXG5cclxuXHRwdWJsaWMgcHJvY2Vzc0V4dGVuc2lvbnMoKSB7XHJcblx0XHR0aGlzLnN0eWxlRWxlbWVudC5pbm5lckhUTUwgPSBcIlwiO1xyXG5cdFx0dGhpcy5zdHlsZUVsZW1lbnQuaW5uZXJIVE1MID0gdGhpcy5leHRlbnNpb25zLkVuYWJsZWRMaXN0XHJcblx0XHRcdC8vIEVhY2ggZXh0ZW5zaW9uIHNob3VsZCBoYW5kbGUgdGhlaXIgb3duIHJ1bGVzIGZvciBmaWx0ZXJpbmcgd2hpY2ggcmVjb3JkcyBhcmUgYXBwbGllZCB0byBvciBub3RcclxuXHRcdFx0LmZsYXRNYXAoZSA9PmUuY3NzV3JhbmdsZXIuZ2V0UnVsZXMoKSlcclxuXHRcdFx0Lm1hcChsaW5lQ2xlYW51cClcclxuXHRcdFx0LmpvaW4oXCIgXCIpXHJcblxyXG5cdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCh0aGlzLnN0eWxlRWxlbWVudCk7XHJcblx0fVxyXG5cclxuXHRwdWJsaWMgY2xlYW51cCgpe1xyXG5cdFx0ZG9jdW1lbnQuaGVhZC5yZW1vdmVDaGlsZCh0aGlzLnN0eWxlRWxlbWVudCk7XHJcblx0fVxyXG5cclxufVxyXG4iXX0=